generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  password    String
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  reviews     Review[]
}

model Admin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  password    String
  permissions String[] @default([])
  createdAt   DateTime @default(now())
}

model Product {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  slug              String   @unique
  description       String?
  regularPrice      Float    @default(0.0)
  salePrice         Float    @default(0.0)
  warranty          String?
  category          String
  sku               String   @unique
  stockQuantity     Int      @default(0)
  discountCode      String?
  tags              String[] @default([])
  publicationStatus String   @default("Draft")
  featuredProduct   Boolean  @default(false)
  images            ProductImage[] @relation("ProductImages")
  reviews           Review[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ProductImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  product   Product  @relation("ProductImages", fields: [productId], references: [id])
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Review {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  rating              Int
  title               String
  comment             String
  date                DateTime @default(now())
  likes               Int      @default(0)
  isVerifiedPurchase  Boolean  @default(false)
  recommendsProduct   Boolean  @default(false)

  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  user   User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // Optional review images as separate model
  images ReviewImage[] @relation("ReviewImages")
}

model ReviewImage {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  url      String
  review   Review  @relation("ReviewImages", fields: [reviewId], references: [id])
  reviewId String  @db.ObjectId
  createdAt DateTime @default(now())
}